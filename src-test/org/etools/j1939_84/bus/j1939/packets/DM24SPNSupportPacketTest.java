/**
 * Copyright 2019 Equipment & Tool Institute
 */
package org.etools.j1939_84.bus.j1939.packets;

import static org.etools.j1939_84.J1939_84.NL;
import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

import org.etools.j1939_84.bus.Packet;

/**
 * Unit tests the {@link DM24SPNSupportPacket} class
 *
 * @author Matt Gumbel (matt@soliddesign.net)
 *
 */
public class DM24SPNSupportPacketTest {

    @Test
    public void testActual() {
        Packet packet = Packet.create(0, 0, 0x5C, 0x00, 0x1C, 0x01, 0x00, 0x02, 0x1C, 0x01, 0x01, 0x02, 0x1C, 0x01,
                0x20, 0x02, 0x1C, 0x02, 0x1B, 0x02, 0x1C, 0x01, 0x1C, 0x02, 0x1C, 0x01, 0x1D, 0x02, 0x1C, 0x01, 0x1E,
                0x02, 0x1C, 0x01, 0x1F, 0x02, 0x1C, 0x01, 0x6E, 0x00, 0x1C, 0x01, 0xAF, 0x00, 0x1C, 0x02, 0xBE, 0x00,
                0x1C, 0x02, 0x54, 0x00, 0x1C, 0x02, 0x6C, 0x00, 0x1C, 0x01, 0x9E, 0x00, 0x1C, 0x02, 0x33, 0x00, 0x1C,
                0x01, 0x5E, 0x00, 0x1C, 0x01, 0xAC, 0x00, 0x1C, 0x01, 0x69, 0x00, 0x1C, 0x01, 0x84, 0x00, 0x1C, 0x02,
                0xD0, 0x03, 0x1C, 0x01, 0x5B, 0x00, 0x1C, 0x01, 0xB7, 0x00, 0x1C, 0x02, 0x66, 0x00, 0x18, 0x01, 0xAD,
                0x00, 0x1C, 0x02, 0xB3, 0x0C, 0x1C, 0x02, 0x9B, 0x0D, 0x1C, 0x01, 0xCD, 0x16, 0x1C, 0x01, 0xE5, 0x0C,
                0x1C, 0x02, 0x5A, 0x15, 0x1C, 0x02, 0xCB, 0x14, 0x1C, 0x01, 0x88, 0x0D, 0x1C, 0x02, 0xB9, 0x04, 0x1C,
                0x02, 0xA5, 0x15, 0x1C, 0x01, 0xA4, 0x00, 0x18, 0x02, 0xE7, 0x0A, 0x1C, 0x02, 0x85, 0x05, 0x1C, 0x02,
                0x86, 0x05, 0x1C, 0x02, 0x87, 0x05, 0x1C, 0x02, 0x88, 0x05, 0x1C, 0x02, 0x89, 0x05, 0x1C, 0x02, 0x8A,
                0x05, 0x1C, 0x02, 0xEB, 0x0D, 0x1C, 0x01, 0x1B, 0x00, 0x1C, 0x02, 0xAA, 0x0C, 0x1C, 0x02, 0xAE, 0x0C,
                0x1C, 0x02, 0x90, 0x0C, 0x18, 0x02, 0x39, 0x04, 0x1C, 0x01, 0xA5, 0x04, 0x1C, 0x01, 0xC2, 0x14, 0x1C,
                0x02, 0x19, 0x0E, 0x1E, 0x02, 0x98, 0x0D, 0x1E, 0x02, 0x9A, 0x0C, 0x1C, 0x02, 0xE1, 0x06, 0x1C, 0x01,
                0x9A, 0x0D, 0x1E, 0x01, 0xA2, 0x0D, 0x1E, 0x01, 0x08, 0x11, 0x1E, 0x02, 0x0B, 0x11, 0x1E, 0x02, 0xD7,
                0x0B, 0x1E, 0x01, 0x45, 0x11, 0x1F, 0x01, 0x95, 0x04, 0x18, 0x02, 0xED, 0x00, 0x1D, 0x11, 0xA1, 0x10,
                0x1B, 0x01, 0x00, 0x09, 0x1F, 0x01, 0x83, 0x03, 0x1D, 0x01, 0x01, 0x09, 0x1F, 0x01, 0xFD, 0x0B, 0x1D,
                0x01, 0xDE, 0x0C, 0x1D, 0x01, 0xDF, 0x0C, 0x1D, 0x01, 0xE0, 0x0C, 0x1D, 0x01, 0xE6, 0x0C, 0x1D, 0x01,
                0x87, 0x0E, 0x1D, 0x01, 0x2B, 0x05, 0x1B, 0x01, 0x2C, 0x05, 0x1B, 0x01, 0x2D, 0x05, 0x1B, 0x01, 0x2E,
                0x05, 0x1B, 0x01, 0x2F, 0x05, 0x1B, 0x01, 0x30, 0x05, 0x1B, 0x01, 0x46, 0x0A, 0x1B, 0x02, 0x63, 0x0A,
                0x1B, 0x02, 0x2A, 0x05, 0x1B, 0x01, 0x90, 0x12, 0x1B, 0x01, 0x9E, 0x12, 0x1F, 0x02, 0xC7, 0x14, 0x1F,
                0x01, 0x8B, 0x02, 0x1B, 0x01, 0x8C, 0x02, 0x1B, 0x01, 0x8D, 0x02, 0x1B, 0x01, 0x8E, 0x02, 0x1B, 0x01,
                0x8F, 0x02, 0x1B, 0x01, 0x90, 0x02, 0x1B, 0x01, 0x8F, 0x0D, 0x1B, 0x01, 0xE4, 0x0D, 0x1B, 0x01, 0x03,
                0x09, 0x1F, 0x01, 0x0A, 0x10, 0x1D, 0x01, 0xC0, 0x04, 0x1D, 0x01, 0xC4, 0x04, 0x1D, 0x01, 0x1F, 0x10,
                0x1D, 0x01, 0x22, 0x10, 0x1D, 0x01, 0xAB, 0x00, 0x1D, 0x02, 0x9D, 0x00, 0x1F, 0x02, 0x3F, 0x0A, 0x1D,
                0x01, 0xF7, 0x00, 0x1D, 0x04, 0xEB, 0x00, 0x1D, 0x04, 0xBD, 0x04, 0x1D, 0x01, 0xE7, 0x0C, 0x1D, 0x01,
                0xE8, 0x0C, 0x1D, 0x01, 0x4E, 0x15, 0x1D, 0x04, 0x4C, 0x02, 0x1D, 0x11, 0xEF, 0x0B, 0x1F, 0x01, 0x57,
                0x15, 0x1D, 0x01, 0xF8, 0x00, 0x1D, 0x04, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00,
                0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00);
        DM24SPNSupportPacket instance = new DM24SPNSupportPacket(packet);
        List<SupportedSPN> spns = instance.getSupportedSpns();
        assertEquals(111, spns.size());
        String expected = "DM24 from Engine #1 (0): (Supporting Scaled Test Results) [" + NL;
        expected += "  SPN 102 - Engine Intake Manifold #1 Pressure" + NL;
        expected += "  SPN 164 - Engine Fuel Injection Control Pressure" + NL;
        expected += "  SPN 3216 - Aftertreatment 1 SCR Intake NOx 1" + NL;
        expected += "  SPN 1173 - Engine Turbocharger 2 Compressor Intake Temperature" + NL;
        expected += "  SPN 4257 - Engine Fuel 1 Injector Group 3" + NL;
        expected += "  SPN 1323 - Engine Misfire Cylinder #1" + NL;
        expected += "  SPN 1324 - Engine Misfire Cylinder #2" + NL;
        expected += "  SPN 1325 - Engine Misfire Cylinder #3" + NL;
        expected += "  SPN 1326 - Engine Misfire Cylinder #4" + NL;
        expected += "  SPN 1327 - Engine Misfire Cylinder #5" + NL;
        expected += "  SPN 1328 - Engine Misfire Cylinder #6" + NL;
        expected += "  SPN 2630 - Engine Charge Air Cooler 1 Outlet Temperature" + NL;
        expected += "  SPN 2659 - Engine Exhaust Gas Recirculation 1 Mass Flow Rate" + NL;
        expected += "  SPN 1322 - Engine Misfire for Multiple Cylinders" + NL;
        expected += "  SPN 4752 - Engine Exhaust Gas Recirculation 1 Cooler Efficiency" + NL;
        expected += "  SPN 651 - Engine Fuel 1 Injector Cylinder 1" + NL;
        expected += "  SPN 652 - Engine Fuel 1 Injector Cylinder 2" + NL;
        expected += "  SPN 653 - Engine Fuel 1 Injector Cylinder 3" + NL;
        expected += "  SPN 654 - Engine Fuel 1 Injector Cylinder 4" + NL;
        expected += "  SPN 655 - Engine Fuel 1 Injector Cylinder 5" + NL;
        expected += "  SPN 656 - Engine Fuel 1 Injector Cylinder 6" + NL;
        expected += "  SPN 3471 - Aftertreatment 1 Fuel Pressure Control Actuator" + NL;
        expected += "  SPN 3556 - Aftertreatment 1 Hydrocarbon Doser 1" + NL;
        expected += "]";
        assertEquals(expected, instance.toString());
    }

    @Test
    public void testOne() {
        Packet packet = Packet.create(0, 0, 0x5C, 0x00, 0x1B, 0x01);
        DM24SPNSupportPacket instance = new DM24SPNSupportPacket(packet);
        List<SupportedSPN> spns = instance.getSupportedSpns();
        assertEquals(1, spns.size());
        SupportedSPN spn = spns.get(0);
        assertEquals(92, spn.getSpn());
        assertEquals(1, spn.getLength());
        assertEquals(false, spn.supportsDataStream());
        assertEquals(false, spn.supportsExpandedFreezeFrame());
        assertEquals(true, spn.supportsScaledTestResults());
        String expected = "DM24 from Engine #1 (0): (Supporting Scaled Test Results) [" + NL;
        expected += "  SPN 92 - Engine Percent Load At Current Speed" + NL;
        expected += "]";
        assertEquals(expected, instance.toString());
    }

    @Test
    public void testPGN() {
        assertEquals(64950, DM24SPNSupportPacket.PGN);
    }

    @Test
    public void testThree() {
        Packet packet = Packet.create(0, 0, 0x5C, 0x00, 0x1B, 0x01, 0x00, 0x02, 0x1B, 0x01, 0x01, 0x02, 0x1B, 0x01);

        DM24SPNSupportPacket instance = new DM24SPNSupportPacket(packet);
        List<SupportedSPN> spns = instance.getSupportedSpns();
        assertEquals(3, spns.size());

        {
            SupportedSPN spn = spns.get(0);
            assertEquals(92, spn.getSpn());
            assertEquals(1, spn.getLength());
            assertEquals(false, spn.supportsDataStream());
            assertEquals(false, spn.supportsExpandedFreezeFrame());
            assertEquals(true, spn.supportsScaledTestResults());
        }
        {
            SupportedSPN spn = spns.get(1);
            assertEquals(512, spn.getSpn());
            assertEquals(1, spn.getLength());
            assertEquals(false, spn.supportsDataStream());
            assertEquals(false, spn.supportsExpandedFreezeFrame());
            assertEquals(true, spn.supportsScaledTestResults());
        }
        {
            SupportedSPN spn = spns.get(2);
            assertEquals(513, spn.getSpn());
            assertEquals(1, spn.getLength());
            assertEquals(false, spn.supportsDataStream());
            assertEquals(false, spn.supportsExpandedFreezeFrame());
            assertEquals(true, spn.supportsScaledTestResults());
        }
        String expected = "DM24 from Engine #1 (0): (Supporting Scaled Test Results) [" + NL
                + "  SPN 92 - Engine Percent Load At Current Speed" + NL
                + "  SPN 512 - Driver's Demand Engine - Percent Torque" + NL
                + "  SPN 513 - Actual Engine - Percent Torque"
                + NL + "]";
        assertEquals(expected, instance.toString());
    }

}
